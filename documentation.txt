Lobby Message Protocol: /lobby

CLIENT -> SERVER:
   [ "LIST" ]

CLIENT -> SERVER:
   [ "HOST", <players> ]

   SERVER -> CLIENT:
      [ "HOST-BAD", <players>, <reason> ]

   SERVER -> CLIENT:
      [ "GAME", <gameid>, completed=true/false, maxPlayers, turnIndex, tilesInBag,
        [ <playername1>, <score1> ], [ <playername2>, <score2> ], ... ]
        turnIndex is -1 if game hasn't started

------------------------------------------------

Game Message Protocol: /game/<gid>

CLIENT -> SERVER:
   [ "JOIN", <playername>, <secret> ]

   SERVER -> CLIENT:
      [ "JOIN-OKAY" ]
      [ "JOIN-BAD", <reason> ]
         reason - 2 players connected, you are in spectator mode
         reason - wrong password

CLIENT -> SERVER:
   [ "VIEW" ]

   SERVER -> CLIENT:
      [ "VIEW-OKAY" ]
      [ "VIEW-BAD", <reason> ]

SERVER -> CLIENT:
   [ "RACKTILES", <letters> ]

SERVER -> CLIENT:
   [ "BOARDTILES", [ "P", x, y ], [ "Q", x, y ], ]

SERVER -> CLIENT:
   [ "SCORE", tilesInBag, [ <playername1>, <score1> ], [ [ <playername2>, <score2> ] ] ]

SERVER -> CLIENT:
   [ "TURN", <playername>, <turn-key> ]

   CLIENT -> SERVER:
      [ "PASS", <turn-key> ]

      SERVER -> CLIENT:
         [ "PASS-OKAY" ] -- broadcast to all
         [ "PASS-BAD", <reason> ]

   CLIENT -> SERVER:
      [ "PLAY", <turn-key>, [ "A", r, c ], [ "b", r, c ], ]

      SERVER -> CLIENT:
         [ "PLAY-OKAY", <letters>, <word made>, <score> ] -- broadcast to all
         [ "PLAY-BAD", <reason> ]
            - out of turn
            - bad turnkey
            - bad word(s)
            - bad move

   CLIENT -> SERVER:
      [ "EXCH", <turn-key>, <letters> ]

      SERVER -> CLIENT:
         [ "EXCH-OKAY", "letters" ] -- to main player
            [ "EXCH-OKAY" ] -- to all other players
         [ "EXCH-BAD", <reason> ]
            - such as out of turn

SERVER -> CLIENT:
   [ "GAME-OVER" ]


CLIENT -> SERVER:
   [ "CHAT-SEND", "string" ]

   SERVER -> CLIENT:
      [ "CHAT-BAD", <reason> ]
      [ "CHAT-MSG", <utc-timestamp>, <name>, <message> ]

CLIENT -> SERVER:
   [ "LIST-MOVES" ]

   SERVER -> CLIENT:
      [ "LIST-MOVES-OKAY",
        [ <pl-name-1>, <pl-name-2>, ... ],
        [ <p1-mv1>, <p2-mv1>, .., <p1-mv2>, <p2-mv2>, ... ] ]
        Each move description is [ <moveType>, <longestWord>, <score>  ]
      [ "LIST-MOVES-BAD", <reason> ]

------------------------------------------------

[sqlite3]

Games:
   [ gid, maxPlayers, turnIndex, wordsMade, passesMade, gameOver, tiles ]

Players:
   [ <pid:autoincrement>, gid, plIdx (0 to 3), playerName, secretKey,
     score,
     hand,
     state,
     turnKey,
     endScoreAdj ]

BoardTiles:
   [ <bid:autoincrement>, gid, row, col, letter, score ]

Moves:
   [ <mid:autoincrement>, <gid>, <pid>,
     moveType (0 to 2; 0-pass, 1-exch, 2-play),
     std::string moveDetail (json - when word made),
     longestWord (exchanged letters, longest word made on valid move),
     score,
   ]

CREATE TABLE `Games` (
        `gid`   INTEGER PRIMARY KEY AUTOINCREMENT,
        `maxPlayers`    INTEGER NOT NULL,
        `turnIndex`     INTEGER NOT NULL,
        `wordsMade`     INTEGER NOT NULL DEFAULT 0,
        `passesMade`    INTEGER NOT NULL DEFAULT 0,
        `gameOver`      INTEGER NOT NULL DEFAULT 0,
        `tiles` TEXT
);

CREATE TABLE `Players` (
	`pid`	INTEGER PRIMARY KEY AUTOINCREMENT,
	`gid`	INTEGER NOT NULL,
	`plIdx`	INTEGER NOT NULL,
	`playerName`	TEXT NOT NULL,
	`secretKey`	INTEGER NOT NULL,
	`score`	INTEGER NOT NULL DEFAULT 0,
	`hand`	TEXT,
	`state`	INTEGER NOT NULL,
	`turnKey`	TEXT,
	`endScoreAdj`	INTEGER NOT NULL DEFAULT 0
);

CREATE TABLE `BoardTiles` (
        `bid`   INTEGER PRIMARY KEY AUTOINCREMENT,
        `gid`   INTEGER NOT NULL,
        `row`   INTEGER NOT NULL,
        `col`   INTEGER NOT NULL,
        `letter`        INTEGER NOT NULL,
        `score` INTEGER NOT NULL
);

CREATE TABLE `Moves` (
        `mid`   INTEGER PRIMARY KEY AUTOINCREMENT,
        `gid`   INTEGER NOT NULL,
        `pid`   INTEGER NOT NULL,
        `moveType`      INTEGER NOT NULL,
        `moveDetail`    TEXT,
        `longestWord`    TEXT,
        `score` INTEGER NOT NULL
);
